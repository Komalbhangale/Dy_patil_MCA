Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.
 

Follow up: Could you come up with a one-pass algorithm using only constant extra space?


Practice:
import java.util.*;

public class SortColors {
    public static void main(String[] args) {
        // Example 1
        int[] nums1 = {2, 0, 2, 1, 1, 0};
        sortColors(nums1);
        System.out.println("Sorted nums1: " + Arrays.toString(nums1)); // Output: [0, 0, 1, 1, 2, 2]

        // Example 2
        int[] nums2 = {2, 0, 1};
        sortColors(nums2);
        System.out.println("Sorted nums2: " + Arrays.toString(nums2)); // Output: [0, 1, 2]

        // Additional example
        int[] nums3 = {1, 0, 2, 1, 0, 1, 2};
        sortColors(nums3);
        System.out.println("Sorted nums3: " + Arrays.toString(nums3)); // Output: [0, 0, 1, 1, 1, 2, 2]
    }

    public static void sortColors(int[] nums) {
      //write your logic here
    }
}

