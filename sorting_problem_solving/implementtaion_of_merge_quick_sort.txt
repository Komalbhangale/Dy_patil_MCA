//Merge Sort Implementation in java:

import java.util.*;

public class Main {
  
    public static void merge(int[] arr,int start,int mid,int end)
    { 
      int[] b= new int[end+1];
      int i=start;
      int j=mid+1;
      int k=start;
      
      while(i<=mid && j<=end)
      {
        if(arr[i]<=arr[j])
        {
          b[k]=arr[i];
          i++;
        }
        else
        {
          b[k]=arr[j];
          j++;
        }
        k++;
      }
      
      if(i>mid)
      {
        while(j<=end)
        {
          b[k]=arr[j];
          j++;
          k++;
        }
      }
      
      if(j>end)
      {
        while(i<=mid)
        {
          b[k]=arr[i];
          i++;k++;
        }
      }
      
      for(i=start;i<=end;i++)
      {
        arr[i]=b[i];
      }
    }
    public static void mergeSort(int[] arr,int start,int end)
    {
      if(start<end)
      {
       int  mid=(start+end)/2;
        mergeSort(arr,start,mid);
        mergeSort(arr,mid+1,end);
        merge(arr,start,mid,end);
      }
    }
    public static void main(String[] args) {
      int[] arr={23,3,67,5,89,7};
      int start=0,end=arr.length-1;
      System.out.println("Before sorting");
      for(int i:arr)
      {
        System.out.print(i+" ");
      }
      mergeSort(arr,start,end);
      System.out.println("after sorting");
      for(int i:arr)
      {
        System.out.print(i+" ");
      }
  }
}
_______________________________________________________________________________________________

//Quick sort implementation
import java.util.*;

public class Main {
    public static int partition(int[] arr, int start, int end) {
        int pivot = arr[start];
        int i = start + 1;
        int j = end;

        while (i <= j) {
            while (i <= j && arr[i] <= pivot) {
                i++;
            }
            while (i <= j && arr[j] > pivot) {
                j--;
            }
            if (i < j) {
                
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        
        int temp = arr[start];
        arr[start] = arr[j];
        arr[j] = temp;

        return j;
    }

    public static void quickSort(int[] arr, int start, int end) {
        if (start < end) {
            int loc = partition(arr, start, end);
            quickSort(arr, start, loc - 1);
            quickSort(arr, loc + 1, end);
        }
    }

    public static void main(String[] args) {
        int[] arr = {23, 3, 67, 5, 89, 7};
        int start = 0, end = arr.length - 1;

        System.out.println("Before sorting:");
        for (int i : arr) {
            System.out.print(i + " ");
        }
        System.out.println();

        quickSort(arr, start, end);

        System.out.println("After sorting:");
        for (int i : arr) {
            System.out.print(i + " ");
        }
    }
}
