/*Maximum Element Less Than Target:

Problem: Write a function that takes an array of integers and a target integer, and returns the maximum element in the array that is less than the target integer. If no such element exists, return None.
Example: Given arr = [4, 2, 7, 1, 3] and target = 5, the function should return 4.

/*
Practice:
Linear search :
import java.util.*;

public class Main {
    public static void main(String[] args) {
      int [] arr={4,2,7,1,3};
      int target =5;
      int max_ele=0;
      for(int i=0;i<arr.length;i++)
      {
        //write your code here
      }
      System.out.println(max_ele);
  }
}


Binary search:
import java.util.*;


public class Main {
    public static void main(String[] args) {
      int [] arr={4,2,7,1,3};
      int target =5;
      int max_ele=0;
      
      Arrays.sort(arr);
      int left=0,right=arr.length-1,mid=0;
      while(left<=right)
      {
       //write your code here
      }
      
      System.out.println(max_ele);
  }
}



--------------------------------------------------------------------------------------------
solution:
Linear search:
import java.util.*;

public class Main {
    public static void main(String[] args) {
      int [] arr={4,2,7,1,3};
      int target =5;
      int max_ele=0;
      for(int i=0;i<arr.length;i++)
      {
        if(arr[i]<target)
        {
          if(max_ele==0 || arr[i]>max_ele)
          {
            max_ele=arr[i];
          }
        }
      }
      
      System.out.println(max_ele);
  }
}

Binary search:
import java.util.*;


public class Main {
    public static void main(String[] args) {
      int [] arr={4,2,7,1,3};
      int target =5;
      int max_ele=0;
      
      Arrays.sort(arr);
      int left=0,right=arr.length-1,mid=0;
      while(left<=right)
      {
        mid=(left+right)/2;
        if(arr[mid]<target)
        {
          max_ele=arr[mid];
          left=mid+1;
        }
        else
        {
          right=mid-1;
        }
      }
      
      System.out.println(max_ele);
  }
}
