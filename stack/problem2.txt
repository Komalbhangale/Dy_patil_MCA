Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the MinStack class:

MinStack() initializes the stack object.
void push(int val) pushes the element val onto the stack.
void pop() removes the element on the top of the stack.
int top() gets the top element of the stack.
int getMin() retrieves the minimum element in the stack.
You must implement a solution with O(1) time complexity for each function.

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2
 

Constraints:

-231 <= val <= 231 - 1
Methods pop, top and getMin operations will always be called on non-empty stacks.
At most 3 * 104 calls will be made to push, pop, top, and getMin.
_________________________________________________________________________________________________________

Practice in java:
import java.util.Stack;

class MinStack {
    

    /** initialize your data structure here. */
    public MinStack() {
        //write your logic here
    }
    
    public void push(int val) {
        //write your logic here
    }
    
    public void pop() {
        //write your logic here
    }
    
    public int top() {
        //write your logic here
    }
    
    public int getMin() {
       //write your logic here
    }

    public static void main(String[] args) {
        MinStack minStack = new MinStack();
        minStack.push(-2);
        minStack.push(0);
        minStack.push(-3);
        System.out.println("Min element after pushing -2, 0, -3: " + minStack.getMin());  // Output: -3
        minStack.pop();
        System.out.println("Top element after pop operation: " + minStack.top());     // Output: 0
        System.out.println("Min element after pop operation: " + minStack.getMin());  // Output: -2
    }
}
_________________________________________________________________________________________________________
practice in python:
class MinStack:
    def __init__(self):
      #write your logic here
        
        
    def push(self, val: int) -> None:
        #write your logic here
        
    def pop(self) -> None:
        #write your logic here
        
    def top(self) -> int:
        #write your logic here
        
    def getMin(self) -> int:
        #write your logic here
        

# Example usage:
if __name__ == "__main__":
    minStack = MinStack()
    minStack.push(-2)
    minStack.push(0)
    minStack.push(-3)
    print("Min element after pushing -2, 0, -3:", minStack.getMin())  # Output: -3
    minStack.pop()
    print("Top element after pop operation:", minStack.top())         # Output: 0
    print("Min element after pop operation:", minStack.getMin())      # Output: -2
