Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 
Example 1:
Input: s = "()"
Output: true

Example 2:
Input: s = "()[]{}"
Output: true

Example 3:
Input: s = "(]"
Output: false
 

Constraints:
1 <= s.length <= 104
s consists of parentheses only '()[]{}'.
_________________________________________________________________________________________
Practice in java:
import java.util.Stack;

public class ValidParentheses {
    public static void main(String[] args) {
        String s1 = "()";
        String s2 = "()[]{}";
        String s3 = "(]";

        System.out.println("Input: " + s1 + " Output: " + isValid(s1));
        System.out.println("Input: " + s2 + " Output: " + isValid(s2));
        System.out.println("Input: " + s3 + " Output: " + isValid(s3));
    }

    public static boolean isValid(String s) {
        //write your logic here
}
_____________________________________________________________________________________________
Practice in python:
def isValid(s: str) -> bool:
   #write your logic here

# Example usage
s1 = "()"
s2 = "()[]{}"
s3 = "(]"

print(f"Input: {s1} Output: {isValid(s1)}")  # Output: True
print(f"Input: {s2} Output: {isValid(s2)}")  # Output: True
print(f"Input: {s3} Output: {isValid(s3)}")  # Output: False
